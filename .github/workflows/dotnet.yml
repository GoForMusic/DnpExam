# Name of the workflow (action) which will be displaye on GitHub
name: Deploy webapi to EB

# Specifies when should the workflow run. Currently it's set-up to every push
# to the branch called 'main'.
on:
  push:
    branches:
      # If you use 'master' branch instead, don't forget to change this to 'master'
      - main

# Global environment variables
env:
  APPLICATION_NAME: WorkshopTest
  ENVIRONMENT_NAME: WorkshopTest-env
  AWS_REGION: eu-north-1

# Each workflow consists of one or many jobs
jobs:
  # A build job (this can be named called whatever you like)
  build:
    runs-on: ubuntu-latest

    # Each job consists of one or many steps
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      # Documentation for this action - https://github.com/actions/setup-dotnet
      - name: Set up .NET 6
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x.x'

      - name: Build and package  
        run: dotnet build


  # Deployment job
  deploy:
    runs-on: ubuntu-latest
    # Only start executing after the build job has completed successfully
    needs: build

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

        # Download the packaged jar file
      - name: Download the build artifact
        uses: actions/download-artifact@v2
        id: download
        with:
          name: jar-package

        # Generate a deployment package with all files necessary for AWS Elastic Beanstalk
        # engine. This includes the packaged jar file and the .elasticbeanstalk folder
        # which contains config.yml file.
      - name: Generate deployment package
        run: zip -r deploy.zip . -x '*.git*'

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          # To make this work, you need to create an IAM User (ideally with least
          # privilege access) and store the generated Access key ID and Secret
          # access key to your GitHub repository Secrets.
          # > DO NOT HARDCODE THE VALUES DIRECTLY INTO THE CODE !!!
          aws_access_key: ${{ secrets.ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.SECRET_ACCESS_KEY }}
          # Make sure to set these variables based on your application/region
          application_name: WorkshopTest
          environment_name: WorkshopTest-env
          version_label: v1-${{ github.sha }}
          region: eu-north-1
          # Deployment package we created in the previous step
          deployment_package: deploy.zip
